// <auto-generated />
using System;
using KIOT.Server.Data.Persistence.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KIOT.Server.Data.Migrations.Identity
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20190305184750_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KIOT.Server.Data.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "24cfabf2-30e5-4e59-9be1-88dd861dec3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d33476a-2537-4d6a-a08f-0341823a274c",
                            Email = "mwilson@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MWILSON@TEST.FAKE",
                            NormalizedUserName = "MWILSON",
                            PasswordHash = "AQAAAAEAACcQAAAAEEE7mvUBiHupzPQ5ulFrXcIrfKFQDgwfzpXDWQxJoZ9U9GpMmyFO7g/w7y3YRmCbdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mwilson"
                        },
                        new
                        {
                            Id = "dfe6beec-0f05-4fe9-851e-078160950468",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c721af33-cc76-43d8-b085-8abe450f17b7",
                            Email = "fbrown@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FBROWN@TEST.FAKE",
                            NormalizedUserName = "FBROWN",
                            PasswordHash = "AQAAAAEAACcQAAAAENf1RSAb494jGcPROfKnBKpWxtymVdpho6Qc1xqV0fF+vYe7feSmX5k1Kr2VdVdVxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "fbrown"
                        },
                        new
                        {
                            Id = "586e130d-2583-4adb-b894-05304f68d1cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb1d1c48-0543-4747-b53a-77e55c160723",
                            Email = "wjones@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WJONES@TEST.FAKE",
                            NormalizedUserName = "WJONES",
                            PasswordHash = "AQAAAAEAACcQAAAAEM85zZULrCxTQEzHCiP9435Y5VxCuCc2n+6SNbl8BG290TwjQhGxQCGT00JsoXs5Yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "wjones"
                        },
                        new
                        {
                            Id = "0254effb-2ca2-4403-97c0-71065525ec3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dce62c4-2448-4798-b035-cee8576aa4ad",
                            Email = "twilliams@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TWILLIAMS@TEST.FAKE",
                            NormalizedUserName = "TWILLIAMS",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwd0rIP8pdRKOAh6serFsQNF+GyU5fWHaAqpQkmYvSMcn52mibWBMG+1QdgbT/ojA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "twilliams"
                        },
                        new
                        {
                            Id = "11fb19f4-e22c-4b0e-91ca-0917ad68ee80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b13aea00-2144-44f2-8d6e-e63cdab9da17",
                            Email = "jsmith@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JSMITH@TEST.FAKE",
                            NormalizedUserName = "JSMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEBWI4ojBLHAh4N+38OyauZTUDOfs7+alBFzMltT0IUX0hk0zzb74ZyZxjgZ0jWGJPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jsmith"
                        },
                        new
                        {
                            Id = "be52b267-353c-45c5-9ab0-9592f5d8e3e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4c0c472-a99f-41b7-9ceb-68aa12e62a23",
                            Email = "jcole@test.fake",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JCOLE@TEST.FAKE",
                            NormalizedUserName = "JCOLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPmEooLaIQUFl0qg5cY5bfWy74deSex7X1674S/zI41v8/AyJddPT7roaGZO+AGEmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jcole"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KIOT.Server.Data.Persistence.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KIOT.Server.Data.Persistence.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KIOT.Server.Data.Persistence.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KIOT.Server.Data.Persistence.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
