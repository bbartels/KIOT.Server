// <auto-generated />
using System;
using KIOT.Server.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KIOT.Server.Data.Migrations
{
    [DbContext(typeof(KIOTContext))]
    partial class KIOTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.ApplianceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ApplianceCategories");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.ApplianceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplianceTypeId");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ApplianceTypeId")
                        .IsUnique();

                    b.ToTable("ApplianceTypes");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CaretakerForCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaretakerId");

                    b.Property<int>("CustomerId");

                    b.Property<Guid>("Guid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CaretakerId", "CustomerId")
                        .IsUnique();

                    b.ToTable("IsCaredForBys");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CaretakerForCustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaretakerId");

                    b.Property<int>("CustomerId");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("Handled");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("CaretakerId", "CustomerId")
                        .IsUnique();

                    b.ToTable("CaretakerForCustomerRequests");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CaretakerId = -4,
                            CustomerId = -1,
                            Guid = new Guid("f61ee92d-792e-45dd-a664-309178a71830"),
                            Handled = false,
                            Timestamp = new DateTime(2019, 3, 5, 18, 47, 11, 105, DateTimeKind.Utc).AddTicks(7470)
                        },
                        new
                        {
                            Id = -2,
                            CaretakerId = -4,
                            CustomerId = -2,
                            Guid = new Guid("ccf08264-5f4b-48bc-9620-83257f14e6df"),
                            Handled = false,
                            Timestamp = new DateTime(2019, 3, 5, 18, 47, 11, 105, DateTimeKind.Utc).AddTicks(8147)
                        },
                        new
                        {
                            Id = -3,
                            CaretakerId = -4,
                            CustomerId = -3,
                            Guid = new Guid("4af29383-bb2e-4b3f-8645-ba1f6318ea0f"),
                            Handled = false,
                            Timestamp = new DateTime(2019, 3, 5, 18, 47, 11, 105, DateTimeKind.Utc).AddTicks(8161)
                        });
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CustomerAppliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<int>("ApplianceId");

                    b.Property<int>("ApplianceTypeId");

                    b.Property<int?>("CategoryId");

                    b.Property<int>("CustomerId");

                    b.Property<Guid>("Guid");

                    b.HasKey("Id");

                    b.HasIndex("ApplianceId")
                        .IsUnique();

                    b.HasIndex("ApplianceTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAppliances");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CustomerTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaretakerId");

                    b.Property<bool>("Completed");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpiresAt");

                    b.Property<Guid>("Guid");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CaretakerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerTasks");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.MobileDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceName");

                    b.Property<Guid>("Guid");

                    b.Property<string>("InstallationId");

                    b.Property<DateTime>("LastLoginAt");

                    b.Property<string>("MobileOS")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstallationId")
                        .IsUnique()
                        .HasFilter("[InstallationId] IS NOT NULL");

                    b.ToTable("MobileDevices");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.MobileDeviceForUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid");

                    b.Property<int>("MobileDeviceId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("MobileDeviceId", "UserId")
                        .IsUnique();

                    b.ToTable("MobileDeviceForUser");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.PushToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndedAt");

                    b.Property<Guid>("Guid");

                    b.Property<int>("MobileDeviceId");

                    b.Property<DateTime>("RegisteredAt");

                    b.Property<string>("Token");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MobileDeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("PushTokens");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<Guid>("Guid");

                    b.Property<string>("RemoteAddress");

                    b.Property<string>("Token");

                    b.Property<string>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<string>("IdentityId");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.Caretaker", b =>
                {
                    b.HasBaseType("KIOT.Server.Core.Models.Application.User");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Caretaker");

                    b.HasData(
                        new
                        {
                            Id = -4,
                            FirstName = "Taylor",
                            Guid = new Guid("9f746084-8796-4ff5-874e-75eb33bfe9e3"),
                            IdentityId = "0254effb-2ca2-4403-97c0-71065525ec3d",
                            LastName = "Williams",
                            PhoneNumber = "+4418821003",
                            Username = "twilliams"
                        },
                        new
                        {
                            Id = -5,
                            FirstName = "Jack",
                            Guid = new Guid("912217dd-b725-47aa-96b9-8fd73e7e6fa0"),
                            IdentityId = "11fb19f4-e22c-4b0e-91ca-0917ad68ee80",
                            LastName = "Smith",
                            PhoneNumber = "+4418821004",
                            Username = "jsmith"
                        },
                        new
                        {
                            Id = -6,
                            FirstName = "Jared",
                            Guid = new Guid("e0e26424-f4cd-4400-bc78-28b0bfef729a"),
                            IdentityId = "be52b267-353c-45c5-9ab0-9592f5d8e3e0",
                            LastName = "Cole",
                            PhoneNumber = "+4418821005",
                            Username = "jcole"
                        });
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.Customer", b =>
                {
                    b.HasBaseType("KIOT.Server.Core.Models.Application.User");

                    b.Property<string>("Code")
                        .HasMaxLength(16);

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasName("IX_Users_Guid1");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            FirstName = "Matt",
                            Guid = new Guid("d53a5412-efdd-4905-9f5d-5c2a624726a2"),
                            IdentityId = "24cfabf2-30e5-4e59-9be1-88dd861dec3c",
                            LastName = "Wilson",
                            PhoneNumber = "+4418821000",
                            Username = "mwilson",
                            Code = "0055_ALT-CM0103"
                        },
                        new
                        {
                            Id = -2,
                            FirstName = "Frank",
                            Guid = new Guid("48dd8db1-2c48-4f8b-a318-8a85cc286557"),
                            IdentityId = "dfe6beec-0f05-4fe9-851e-078160950468",
                            LastName = "Brown",
                            PhoneNumber = "+4418821001",
                            Username = "fbrown",
                            Code = "0055_ALT-CM0104"
                        },
                        new
                        {
                            Id = -3,
                            FirstName = "Will",
                            Guid = new Guid("cf0415f9-ab05-47ba-a0ec-2c0e3f874bbc"),
                            IdentityId = "586e130d-2583-4adb-b894-05304f68d1cf",
                            LastName = "Jones",
                            PhoneNumber = "+4418821002",
                            Username = "wjones",
                            Code = "0055_ALT-CM0105"
                        });
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.ApplianceCategory", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.Customer", "Customer")
                        .WithMany("ApplianceCategories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CaretakerForCustomer", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.Caretaker", "Caretaker")
                        .WithMany("TakingCareOf")
                        .HasForeignKey("CaretakerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIOT.Server.Core.Models.Application.Customer", "Customer")
                        .WithMany("IsCaredForBy")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CaretakerForCustomerRequest", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.Caretaker", "Caretaker")
                        .WithMany("TakingCareOfRequests")
                        .HasForeignKey("CaretakerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIOT.Server.Core.Models.Application.Customer", "Customer")
                        .WithMany("IsCaredForByRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CustomerAppliance", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.ApplianceType", "ApplianceType")
                        .WithMany("CustomerAppliances")
                        .HasForeignKey("ApplianceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIOT.Server.Core.Models.Application.ApplianceCategory", "Category")
                        .WithMany("Appliances")
                        .HasForeignKey("CategoryId");

                    b.HasOne("KIOT.Server.Core.Models.Application.Customer", "Customer")
                        .WithMany("Appliances")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.CustomerTask", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.Caretaker", "Caretaker")
                        .WithMany("CustomersTasks")
                        .HasForeignKey("CaretakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KIOT.Server.Core.Models.Application.Customer", "Customer")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.MobileDeviceForUser", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.MobileDevice", "MobileDevice")
                        .WithMany("UsedBy")
                        .HasForeignKey("MobileDeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIOT.Server.Core.Models.Application.User", "User")
                        .WithMany("UsesDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.PushToken", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.MobileDevice", "MobileDevice")
                        .WithMany("PushTokens")
                        .HasForeignKey("MobileDeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIOT.Server.Core.Models.Application.User", "User")
                        .WithMany("PushTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KIOT.Server.Core.Models.Application.RefreshToken", b =>
                {
                    b.HasOne("KIOT.Server.Core.Models.Application.User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
